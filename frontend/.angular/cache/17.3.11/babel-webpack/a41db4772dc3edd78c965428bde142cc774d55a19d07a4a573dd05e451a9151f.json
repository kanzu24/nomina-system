{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:5000/api';\n    }\n    /**\n     * Valida un archivo Excel y retorna las hojas válidas e inválidas\n     * @param file Archivo Excel a validar\n     * @returns Observable con el resultado de la validación\n     */\n    validateExcel(file) {\n      const formData = new FormData();\n      formData.append('file', file);\n      return this.http.post(`${this.apiUrl}/validate`, formData).pipe(catchError(this.handleError));\n    }\n    /**\n     * Obtiene una previsualización de los datos de las hojas seleccionadas\n     * @param file Archivo Excel\n     * @param sheets Array con los nombres de las hojas a previsualizar\n     * @returns Observable con los datos de previsualización\n     */\n    previewExcel(file, sheets) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('sheets', JSON.stringify(sheets));\n      return this.http.post(`${this.apiUrl}/preview`, formData).pipe(catchError(this.handleError));\n    }\n    /**\n     * Importa los datos de las hojas seleccionadas a la base de datos\n     * @param file Archivo Excel\n     * @param sheets Array con los nombres de las hojas a importar\n     * @returns Observable con el resultado de la importación\n     */\n    importExcel(file, sheets) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('sheets', JSON.stringify(sheets));\n      return this.http.post(`${this.apiUrl}/import`, formData).pipe(catchError(this.handleError));\n    }\n    /**\n     * Obtiene la lista de todos los empleados\n     * @returns Observable con el array de empleados\n     */\n    getEmployees() {\n      return this.http.get(`${this.apiUrl}/employees`).pipe(catchError(this.handleError));\n    }\n    /**\n     * Obtiene estadísticas generales de los empleados\n     * @returns Observable con las estadísticas\n     */\n    getStatistics() {\n      return this.http.get(`${this.apiUrl}/statistics`).pipe(catchError(this.handleError));\n    }\n    /**\n     * Elimina un empleado por su ID\n     * @param id ID del empleado a eliminar\n     * @returns Observable con el resultado de la eliminación\n     */\n    deleteEmployee(id) {\n      return this.http.delete(`${this.apiUrl}/employees/${id}`).pipe(catchError(this.handleError));\n    }\n    /**\n     * Crea un nuevo empleado\n     * @param employee Datos del empleado\n     * @returns Observable con el empleado creado\n     */\n    createEmployee(employee) {\n      return this.http.post(`${this.apiUrl}/employees`, employee, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      }).pipe(catchError(this.handleError));\n    }\n    /**\n     * Actualiza un empleado existente\n     * @param id ID del empleado\n     * @param employee Datos actualizados del empleado\n     * @returns Observable con el empleado actualizado\n     */\n    updateEmployee(id, employee) {\n      return this.http.put(`${this.apiUrl}/employees/${id}`, employee, {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      }).pipe(catchError(this.handleError));\n    }\n    /**\n     * Obtiene un empleado por su ID\n     * @param id ID del empleado\n     * @returns Observable con los datos del empleado\n     */\n    getEmployeeById(id) {\n      return this.http.get(`${this.apiUrl}/employees/${id}`).pipe(catchError(this.handleError));\n    }\n    /**\n     * Health check del servidor\n     * @returns Observable con el estado del servidor\n     */\n    healthCheck() {\n      return this.http.get(`${this.apiUrl}/health`).pipe(catchError(this.handleError));\n    }\n    /**\n     * Obtiene todos los endpoints disponibles\n     * @returns Observable con la lista de endpoints\n     */\n    getEndpoints() {\n      return this.http.get(`${this.apiUrl}/endpoints`).pipe(catchError(this.handleError));\n    }\n    /**\n     * Reinicia el contenedor Docker\n     * @returns Observable con el resultado del reinicio\n     */\n    restartContainer() {\n      return this.http.post(`${this.apiUrl}/restart`, {}).pipe(catchError(this.handleError));\n    }\n    /**\n     * Obtiene los errores de importación\n     * @returns Observable con los errores registrados\n     */\n    getImportErrors() {\n      return this.http.get(`${this.apiUrl}/errors`).pipe(catchError(this.handleError));\n    }\n    /**\n     * Obtiene el historial de importaciones\n     * @returns Observable con el historial\n     */\n    getImportHistory() {\n      return this.http.get(`${this.apiUrl}/import-history`).pipe(catchError(this.handleError));\n    }\n    /**\n     * Manejo centralizado de errores HTTP\n     * @param error Error HTTP\n     * @returns Observable que emite el error\n     */\n    handleError(error) {\n      let errorMessage = 'Ocurrió un error desconocido';\n      if (error.error instanceof ErrorEvent) {\n        // Error del lado del cliente\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Error del lado del servidor\n        if (error.error?.message) {\n          errorMessage = error.error.message;\n        } else if (error.message) {\n          errorMessage = error.message;\n        } else {\n          errorMessage = `Código de error: ${error.status}, mensaje: ${error.statusText}`;\n        }\n      }\n      console.error('Error en ApiService:', errorMessage, error);\n      return throwError(() => error);\n    }\n    /**\n     * Obtiene la URL base de la API\n     * @returns URL base\n     */\n    getApiUrl() {\n      return this.apiUrl;\n    }\n    /**\n     * Cambia la URL base de la API (útil para cambiar entre desarrollo y producción)\n     * @param url Nueva URL base\n     */\n    setApiUrl(url) {\n      this.apiUrl = url;\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}