{"ast":null,"code":"import { inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ApiService } from '../../services/api.service';\nimport * as i0 from \"@angular/core\";\nexport let EmployeesListComponent = /*#__PURE__*/(() => {\n  class EmployeesListComponent {\n    constructor() {\n      this.refresh = false;\n      this.apiService = inject(ApiService);\n      this.employees = [];\n      this.filteredEmployees = [];\n      this.isLoading = false;\n      this.errorMessage = '';\n      // Paginación\n      this.currentPage = 1;\n      this.pageSize = 10;\n      this.itemsPerPage = 10;\n      this.totalEmployees = 0;\n      this.totalPages = 0;\n      // Filtros\n      this.searchTerm = '';\n      this.filterSexo = '';\n      this.filterCargo = '';\n      this.sortColumn = 'id';\n      this.sortDirection = 'asc';\n      // Valores únicos para filtros\n      this.uniqueSexos = [];\n      this.uniqueCargos = [];\n    }\n    ngOnInit() {\n      this.loadEmployees();\n    }\n    ngOnChanges(changes) {\n      if (changes['refresh'] && changes['refresh'].currentValue) {\n        this.loadEmployees();\n      }\n    }\n    loadEmployees() {\n      this.isLoading = true;\n      this.errorMessage = '';\n      this.apiService.getEmployees().subscribe({\n        next: response => {\n          this.isLoading = false;\n          if (response.status === 200 && response.data) {\n            this.employees = response.data;\n            this.totalEmployees = this.employees.length;\n            this.extractUniqueValues();\n            this.applyFilters();\n          } else {\n            this.errorMessage = response.message || 'Error al cargar empleados';\n          }\n        },\n        error: error => {\n          this.isLoading = false;\n          this.errorMessage = error.error?.message || 'Error al cargar los datos';\n          console.error('Error cargando empleados:', error);\n        }\n      });\n    }\n    extractUniqueValues() {\n      this.uniqueSexos = [...new Set(this.employees.map(e => e.sexo))].sort();\n      this.uniqueCargos = [...new Set(this.employees.map(e => e.cargo))].sort();\n    }\n    applyFilters() {\n      let filtered = [...this.employees];\n      // Búsqueda por texto\n      if (this.searchTerm.trim()) {\n        const term = this.searchTerm.toLowerCase();\n        filtered = filtered.filter(e => e.nombre.toLowerCase().includes(term) || e.cargo.toLowerCase().includes(term) || e.sexo.toLowerCase().includes(term));\n      }\n      // Filtro por sexo\n      if (this.filterSexo) {\n        filtered = filtered.filter(e => e.sexo === this.filterSexo);\n      }\n      // Filtro por cargo\n      if (this.filterCargo) {\n        filtered = filtered.filter(e => e.cargo === this.filterCargo);\n      }\n      // Ordenamiento\n      filtered.sort((a, b) => {\n        const valueA = a[this.sortColumn];\n        const valueB = b[this.sortColumn];\n        let comparison = 0;\n        if (valueA > valueB) {\n          comparison = 1;\n        } else if (valueA < valueB) {\n          comparison = -1;\n        }\n        return this.sortDirection === 'asc' ? comparison : -comparison;\n      });\n      this.filteredEmployees = filtered;\n      this.calculateTotalPages();\n      this.currentPage = 1;\n    }\n    onSearchChange() {\n      this.applyFilters();\n    }\n    onFilterChange() {\n      this.applyFilters();\n    }\n    sortBy(column) {\n      if (this.sortColumn === column) {\n        this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';\n      } else {\n        this.sortColumn = column;\n        this.sortDirection = 'asc';\n      }\n      this.applyFilters();\n    }\n    calculateTotalPages() {\n      this.totalPages = Math.ceil(this.filteredEmployees.length / this.pageSize);\n    }\n    get paginatedEmployees() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      return this.filteredEmployees.slice(start, end);\n    }\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    }\n    previousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    }\n    goToPage(page) {\n      if (page >= 1 && page <= this.totalPages) {\n        this.currentPage = page;\n      }\n    }\n    get pageNumbers() {\n      const pages = [];\n      const maxPagesToShow = 5;\n      let startPage = Math.max(1, this.currentPage - Math.floor(maxPagesToShow / 2));\n      let endPage = Math.min(this.totalPages, startPage + maxPagesToShow - 1);\n      if (endPage - startPage < maxPagesToShow - 1) {\n        startPage = Math.max(1, endPage - maxPagesToShow + 1);\n      }\n      for (let i = startPage; i <= endPage; i++) {\n        pages.push(i);\n      }\n      return pages;\n    }\n    clearFilters() {\n      this.searchTerm = '';\n      this.filterSexo = '';\n      this.filterCargo = '';\n      this.applyFilters();\n    }\n    deleteEmployee(id) {\n      if (!confirm('¿Está seguro de eliminar este empleado?')) {\n        return;\n      }\n      // Si tienes endpoint de eliminación, descomenta esto:\n      /*\n      this.apiService.deleteEmployee(id).subscribe({\n        next: (response: ApiResponse<any>) => {\n          if (response.status === 200) {\n            this.loadEmployees();\n          }\n        },\n        error: (error: HttpErrorResponse) => {\n          console.error('Error eliminando empleado:', error);\n          alert('Error al eliminar empleado');\n        }\n      });\n      */\n      // Temporal: eliminar del array local\n      this.employees = this.employees.filter(e => e.id !== id);\n      this.applyFilters();\n    }\n    refreshData() {\n      this.loadEmployees();\n    }\n    exportToCSV() {\n      const headers = ['ID', 'Nombre', 'Edad', 'Sexo', 'Cargo', 'Sueldo', 'Fecha Creación'];\n      const csvData = this.filteredEmployees.map(emp => [emp.id, emp.nombre, emp.edad, emp.sexo, emp.cargo, emp.sueldo, this.formatDate(emp.created_at)]);\n      let csv = headers.join(',') + '\\n';\n      csvData.forEach(row => {\n        csv += row.map(cell => `\"${cell}\"`).join(',') + '\\n';\n      });\n      const blob = new Blob([csv], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `empleados_${new Date().getTime()}.csv`;\n      link.click();\n      window.URL.revokeObjectURL(url);\n    }\n    formatCurrency(amount) {\n      return new Intl.NumberFormat('es-CO', {\n        style: 'currency',\n        currency: 'COP',\n        minimumFractionDigits: 0\n      }).format(amount);\n    }\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return new Intl.DateTimeFormat('es-CO', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      }).format(date);\n    }\n    static {\n      this.ɵfac = function EmployeesListComponent_Factory(t) {\n        return new (t || EmployeesListComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: EmployeesListComponent,\n        selectors: [[\"app-employees-list\"]],\n        inputs: {\n          refresh: \"refresh\"\n        },\n        standalone: true,\n        features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n        decls: 0,\n        vars: 0,\n        template: function EmployeesListComponent_Template(rf, ctx) {},\n        dependencies: [CommonModule, FormsModule],\n        styles: [\".employees-container[_ngcontent-%COMP%]{margin-bottom:2rem}.employees-header[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:2rem;padding-bottom:1rem;border-bottom:2px solid var(--border-color)}.employees-header[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{margin:0}.filters-section[_ngcontent-%COMP%]{margin-bottom:2rem}.filters-row[_ngcontent-%COMP%]{display:grid;grid-template-columns:2fr 1fr 1fr auto;gap:1rem;margin-bottom:1rem}.filter-group[_ngcontent-%COMP%]{display:flex;flex-direction:column}.results-info[_ngcontent-%COMP%]{color:var(--text-secondary);font-size:.875rem}.sortable[_ngcontent-%COMP%]{cursor:pointer;-webkit-user-select:none;user-select:none;transition:color var(--transition-fast)}.sortable[_ngcontent-%COMP%]:hover{color:var(--primary-light)}.sort-icon[_ngcontent-%COMP%]{margin-left:.5rem;font-size:.875rem}.employee-row[_ngcontent-%COMP%]{transition:all var(--transition-fast)}.employee-row[_ngcontent-%COMP%]:hover{background-color:#667eea14;transform:scale(1.005)}.employee-name[_ngcontent-%COMP%]{font-weight:500;color:var(--text-primary)}.salary-cell[_ngcontent-%COMP%]{font-weight:600;color:var(--success-color)}.btn-action[_ngcontent-%COMP%]{padding:.5rem;border:none;background:none;cursor:pointer;font-size:1.25rem;transition:transform var(--transition-fast)}.btn-action[_ngcontent-%COMP%]:hover{transform:scale(1.2)}.btn-action.btn-danger[_ngcontent-%COMP%]:hover{filter:brightness(1.2)}.pagination[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;gap:1rem;margin-top:2rem;padding-top:2rem;border-top:2px solid var(--border-color)}.page-numbers[_ngcontent-%COMP%]{display:flex;gap:.5rem}.page-number[_ngcontent-%COMP%]{width:40px;height:40px;border:2px solid var(--border-color);background:#fff;border-radius:var(--border-radius-sm);cursor:pointer;transition:all var(--transition-fast);font-weight:500;color:var(--text-primary)}.page-number[_ngcontent-%COMP%]:hover{border-color:var(--primary-color);color:var(--primary-color)}.page-number.active[_ngcontent-%COMP%]{background:linear-gradient(135deg,var(--primary-color) 0%,var(--secondary-color) 100%);border-color:var(--primary-color);color:#fff}.empty-state[_ngcontent-%COMP%]{text-align:center;padding:4rem 2rem}.empty-icon[_ngcontent-%COMP%]{font-size:5rem;margin-bottom:1rem}.empty-state[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin-bottom:.5rem;color:var(--text-primary)}.empty-state[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{color:var(--text-secondary)}.loading-state[_ngcontent-%COMP%]{text-align:center;padding:3rem}.loading-state[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-top:1rem;color:var(--text-secondary)}@media (max-width: 768px){.filters-row[_ngcontent-%COMP%]{grid-template-columns:1fr}.employees-header[_ngcontent-%COMP%]{flex-direction:column;gap:1rem;align-items:flex-start}.table-container[_ngcontent-%COMP%]{overflow-x:auto}.pagination[_ngcontent-%COMP%]{flex-wrap:wrap}}\"]\n      });\n    }\n  }\n  return EmployeesListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}